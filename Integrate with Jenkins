https://www.youtube.com/watch?v=UjCVCvdI73w

First create a vm specific for sonarqube , if you not specify proper h/w it stop to up.

https://stackoverflow.com/questions/47835125/sonarqube-process-exited-with-exit-value-es-137

By default  "Embedded database should be used for evaluation purposes only" like H2 in sonarqube

NOTE: Embedded database should be used for evaluation purposes only

The embedded database will not scale, it will not support upgrading to newer versions of SonarQube, and there is no support for 
migrating your data out of it into a different database engine.

Java is pre-requisiste for sonarqube

https://docs.sonarqube.org/latest/setup/install-server/
https://www.sonarqube.org/success-download-community-edition/

From sonarqube 7 onwards it need java 11 as pre-requisite

================================== INSTALL JAVA-11 ===============================

https://tecadmin.net/install-java-on-amazon-linux/

INSTALL JAVA-11

sudo amazon-linux-extras install java-openjdk11
java -version


================================ INSTAL SONARQUBE USINT ZIP FILE ==================================
Need to install sonarqube as non root user only, otherwie elastisearch will not up.

https://docs.sonarqube.org/latest/setup/install-server/
https://www.sonarqube.org/success-download-community-edition/

1.wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.2.3.50713.zip
2.unzip sonarqube-9.2.3.50713.zip
3.cd sonarqube-9.2.3.50713

[ec2-user@ip-172-31-10-73 ~]$ cd sonarqube-9.2.3.50713/
[ec2-user@ip-172-31-10-73 sonarqube-9.2.3.50713]$ ls
bin  conf  COPYING  data  dependency-license.json  elasticsearch  extensions  lib  logs  temp  web

[ec2-user@ip-172-31-10-73 sonarqube-9.2.3.50713]$ cd bin/
[ec2-user@ip-172-31-10-73 bin]$ ls
jsw-license  linux-x86-64  macosx-universal-64  windows-x86-64
[ec2-user@ip-172-31-10-73 bin]$ cd linux-x86-64/

[ec2-user@ip-172-31-10-73 linux-x86-64]$ ls
lib  SonarQube.pid  sonar.sh  wrapper

$pwd
/home/ec2-user/sonarqube-9.2.3.50713/bin/linux-x86-64
lib  SonarQube.pid  sonar.sh  wrapper

./sonar.sh status
./sonar.sh start
./sonar.sh stop


Once up login with below port <ip>:9000
http://44.201.10.5:9000/                         #admin/admin

================================= how to check the logs ==================================

[ec2-user@ip-172-31-10-73 ~]$ ls
sonarqube-9.2.3.50713  

[ec2-user@ip-172-31-10-73 ~]$ cd sonarqube-9.2.3.50713/
[ec2-user@ip-172-31-10-73 sonarqube-9.2.3.50713]$ ls
bin  conf  COPYING  data  dependency-license.json  elasticsearch  extensions  lib  logs  temp  web

[ec2-user@ip-172-31-10-73 sonarqube-9.2.3.50713]$ cd logs/
[ec2-user@ip-172-31-10-73 logs]$ ls
access.log  ce.log  es.log  README.txt  sonar.20211221.log  web.log

cat access.log
cat sonar.20211221.log

================================== CHANGE SONAR PORT AND CONFIGURATION ==================================

GO TO CONFIGURATION 

$ pwd
/home/ec2-user/sonarqube-9.2.3.50713/conf

ls
sonar.properties  wrapper.conf

vi sonar.properties

go to path "webserver" and update ,by default its commented and works on 9000 if you want to update uncommenct and restart sonarqube (107 line)

# TCP port for incoming HTTP connections. Default value is 9000.
#sonar.web.port=9000
sonar.web.port=8000

IF YOU WANT UPDATE PORT ONLY CHANGE THAT BY DEFAULT IT ACCESS 9000 ( EVEN IF COMMENTED )

---------------> Once update restart sonarqube <-------------------

cd /home/ec2-user/sonarqube-9.2.3.50713/bin/linux-x86-64
[ec2-user@ip-172-31-10-73 linux-x86-64]$ ls
lib  SonarQube.pid  sonar.sh  wrapper

[ec2-user@ip-172-31-10-73 linux-x86-64]$ ./sonar.sh stop
Gracefully stopping SonarQube...
Stopped SonarQube.

[ec2-user@ip-172-31-10-73 linux-x86-64]$ ./sonar.sh start
Starting SonarQube...
Started SonarQube.

[ec2-user@ip-172-31-10-73 linux-x86-64]$ ./sonar.sh status
SonarQube is running (14071).

access with <ip>:8000

by default credentials are      --> admin/admin   once login we need to update password   ---> admin/root

============================================= STEP2 ==============================================

Once login --> click select projects -----> manually

name it as "sonarqube-vnd" and create token 

->name it as any like "sonarqube-vnd" and click on generate 
6cbeb10a90d8cbe7b054110363d0b89c3b5b4a97


Save this token in "manage credentials" in Jenkins UI 

kind: secret text
scope: global
id: sonarqube-cred

save

====================== CONFIGURE SONARQUBE IN CONFIGURE SYSTEM IN JENKINS ======================================

SonarQube servers:

tick:
Environment variables Enable injection of SonarQube server configuration as build environment variables
If checked, job administrators will be able to inject a SonarQube server configuration as environment variables in the build.

name: sonarqube-9.2  (any)
server url : http://44.201.90.55:9000/
Server authentication token : sonarqube-cred


install sonarqube scanner plugin 

and update in gloabl tool configuration in Jenkins UI automqtically.

========================================================================================

->Run analysis on your project What option best describes your build?
click on "maven"

Execute the Scanner for Maven
Running a SonarQube analysis with Maven is straighforward. You just need to run the following command in your project's folder.

mvn clean verify sonar:sonar \
  -Dsonar.projectKey=sonarqube-vnd \
  -Dsonar.host.url=http://44.201.10.55:8000 \
  -Dsonar.login=6cbeb10a90d8cbe7b054110363d0b89c3b5b4a97
  
  
  
------------------------------------------------------- Jenkinsfile -------------------------------------------------------

node {
   def mvnHome = tool name: 'mvn-3.8.4'                         //def mvn tool "mvn-3.8.4' name mentioned in global tool configuration
   stage('checkout git scm') {
      git credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/vnd-itrack-jenkinsfile-CICD-DEC2021.git'
	   //http://3.94.101.38:8080/job/declarative%20pipeline/pipeline-syntax/ 
	   //use this for above git row creation "generate //pipleinscript
    }
   stage('package'){
      sh "${mvnHome}/bin/mvn -v"
      sh "${mvnHome}/bin/mvn clean package"                     //you must add "" before interpolation ${mvnHome}
    }
   stage('SonarQube analysis') {
      //def scannerHome = tool 'SonarScanner 4.0';
      withSonarQubeEnv('sonarqube-9.2') {                      // If you have configured more  one global server connection, you specify its name
      //sh "${scannerHome}/bin/sonar-scanner"
      sh "${mvnHome}/bin/mvn sonar:sonar"
    }
  }
}


=======================================================================================
































======================> create a qulity profile ( set of rules to validate ) <==========================

default is "sonarway"

create a quality-profile 

name: vnd-java-quality-profile
lang: java
parent: none

Once create you have active are 0 
click on activate more and add individual or bulk mode

Rules
              Active	            Inactive
Total	         0	                 639
Bugs	         0	                 155
Vulnerabilities	0	                  42
Code Smells	   0	                  398
Security Hotspots	  0	              44

once done check on "quality profile" for java

sonarway                   
vnd-java-quality-profile

by default sonarway is default, if you want to change you need to change from next jenkins build it will check the default as vnd-java-quality-profile



---------- ------------------------------ QULTITY GATES --------------------------------------------------

How many bugs are there , if bugs in your code is reached to the threshold value of qulity gate , it can limit your code to passing or failing

in sonarqube we can decide

---> if code Coverage	is less than	80.0% it will not pass code ----> qulity of code is not goog
---> Duplicated Lines (%)	is greater than	3.0%

This value change based on project

Based on this we can treat our code good or not

Metric	Operator	Value
Coverage	is less than	80.0%
Duplicated Lines (%)	is greater than	3.0%
Maintainability Rating	is worse than	A
Reliability Rating	is worse than	A
Security Hotspots Reviewed	is less than	100%
Security Rating	is worse than	A


code coverage:
test cases written that covers 90% of code
if your test cases cover 90% of lines treated as code coverage 90%

CREATE QUALITY GATE:

NAME: vnd-qualitygate

Condition Coverage	is less than	90.0%

(Condition Coverage    Eg:Test cases written that covers 90% of code , If your test cases cover 90% of lines treated as code coverage 90%)





































  
  
  
  
  


